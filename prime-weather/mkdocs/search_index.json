{
    "docs": [
        {
            "location": "/",
            "text": "Prime Weather Service\u2122\n\n\nJava API Developer Guide\n\n\n\n\n\n\n\n\n\nWhat is Prime Weather?\n\n\nPrime Weather\n is a cloud-based application that provides detailed \nweather forecasts for the entire world. Using proprietary algorithms, Prime Weather\ncombines data from 17 weather models to deliver current conditions and the most \naccurate forecasts available. The application also provides detailed historic \nweather data back to 1849 for the United States. \n\n\nJava API\n\n\nThe Prime Weather Java API allows developers to quickly integrate weather data capabilities\ninto their applications and provides functionality to easily retrieve current weather conditions, \nforecasted future conditions, and historic data. The API is distributed as a single JAR file with several \nsupported versions available. Prime Weather recommends using the latest stable version for production \nimplementations.\n\n\n\n\n\n\n\n\nVersion\n\n\nRelease Date\n\n\nJAR Filename\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n4.0.3\n\n\n2016-04-02\n\n\npws-403-beta.jar\n\n\nLatest beta version\n\n\n\n\n\n\n3.7.1\n\n\n2016-03-15\n\n\npws-371-stable.jar\n\n\nLatest stable version\n\n\n\n\n\n\n3.7.0\n\n\n2015-10-12\n\n\npws-370-stable.jar\n\n\nStable\n\n\n\n\n\n\n2.4.2\n\n\n2015-06-13\n\n\npws-242-stable.jar\n\n\nStable",
            "title": "Overview"
        },
        {
            "location": "/#what-is-prime-weather",
            "text": "Prime Weather  is a cloud-based application that provides detailed \nweather forecasts for the entire world. Using proprietary algorithms, Prime Weather\ncombines data from 17 weather models to deliver current conditions and the most \naccurate forecasts available. The application also provides detailed historic \nweather data back to 1849 for the United States.",
            "title": "What is Prime Weather?"
        },
        {
            "location": "/#java-api",
            "text": "The Prime Weather Java API allows developers to quickly integrate weather data capabilities\ninto their applications and provides functionality to easily retrieve current weather conditions, \nforecasted future conditions, and historic data. The API is distributed as a single JAR file with several \nsupported versions available. Prime Weather recommends using the latest stable version for production \nimplementations.     Version  Release Date  JAR Filename  Comments      4.0.3  2016-04-02  pws-403-beta.jar  Latest beta version    3.7.1  2016-03-15  pws-371-stable.jar  Latest stable version    3.7.0  2015-10-12  pws-370-stable.jar  Stable    2.4.2  2015-06-13  pws-242-stable.jar  Stable",
            "title": "Java API"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\n\n\n\n\n\nCreate a Prime Weather Service Account\n\n\nAn \nAccount Key\n is required to access the Prime Weather system. Obtain a unique account key\nby visiting the \nPrime Weather website\n and creating a new account. The website will \nprovide your unique account key at the end of the registration process. You can obtain your\nkey from the website at any time by logging into your account and navigating to the \n\nAccount Information\n page.\n\n\nDownload the Java API\n\n\nAfter your account is created, download the Java API JAR file from the \nDownload\n page of \nthe \nPrime Weather website\n. The JAR file contains the classes required for connecting to \nPrime Weather and accessing weather data. Consult the documentation for your development environment\nfor instructions on using classes from JAR files.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#create-a-prime-weather-service-account",
            "text": "An  Account Key  is required to access the Prime Weather system. Obtain a unique account key\nby visiting the  Prime Weather website  and creating a new account. The website will \nprovide your unique account key at the end of the registration process. You can obtain your\nkey from the website at any time by logging into your account and navigating to the  Account Information  page.",
            "title": "Create a Prime Weather Service Account"
        },
        {
            "location": "/getting-started/#download-the-java-api",
            "text": "After your account is created, download the Java API JAR file from the  Download  page of \nthe  Prime Weather website . The JAR file contains the classes required for connecting to \nPrime Weather and accessing weather data. Consult the documentation for your development environment\nfor instructions on using classes from JAR files.",
            "title": "Download the Java API"
        },
        {
            "location": "/class-overview/",
            "text": "API Classes\n\n\n\n\n\n\nOverview of Classes\n\n\nThe Java API provides several classes for connecting to the web service and \nretrieving weather data as described in the table below.\n\n\n\n\n\n\n\n\nClass\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nConnection\n\n\nCreates connections to the Prime Weather web application\n\n\n\n\n\n\nForecast\n\n\nRetrieves current and future weather conditions\n\n\n\n\n\n\nHistory\n\n\nRetrieves historic weather conditions\n\n\n\n\n\n\nConditions\n\n\nContains the weather data returned by the methods of the Forecast and History classes\n\n\n\n\n\n\nAlert\n\n\nContains weather alert data returned by the Forecast class\n\n\n\n\n\n\n\n\nConditions\n Class Details\n\n\nThe Conditions class inherits from java.util.HashMap and provides a key/value map (<String, String>) \nof weather data item names and values. \nThe various methods of the Forecast and History classes return Condition objects containing different sets \nof data items. \nTable-1 below identifies all weather data items. Table-2 specifies the specific sets of data items\nreturned in Condition objects by methods of the Forecast and History classes.\n\n\nTable-1 Weather Data Items\n\n\n\n\n\n\n\n\nData Item Name\n\n\nUnits of Measure\n\n\n\n\n\n\n\n\n\n\nTemperature\n\n\ndegrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)\n\n\n\n\n\n\nHigh Temperature\n\n\ndegrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)\n\n\n\n\n\n\nLow Temperature\n\n\ndegrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)\n\n\n\n\n\n\nHumidity\n\n\n%\n\n\n\n\n\n\nPressure\n\n\nmillibar (mb)\n\n\n\n\n\n\nDewpoint\n\n\ndegrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)\n\n\n\n\n\n\nWind Speed\n\n\nKnots (kts) or Meters/Second (m/s)\n\n\n\n\n\n\nWind Direction\n\n\nDegrees (\u00b0)\n\n\n\n\n\n\nSky Conditions\n\n\nSunny, Partly Sunny, Mostly Sunny, Cloudy, Partly Cloudy, Mostly Cloudy\n\n\n\n\n\n\nSunrise\n\n\n24-hour time\n\n\n\n\n\n\nSunset\n\n\n24-hour time\n\n\n\n\n\n\n\n\nTable-2 Data Items Returned in Condition Objects\n\n\n\n\n\n\n\n\nClass.Method\n\n\nData Items in the returned Conditions object\n\n\n\n\n\n\n\n\n\n\nForecast.getCurrentConditions()\n\n\nTemperature, Humidity, DewPoint, Pressure\n\n\n\n\n\n\nForecast.getHourlyForecast()\n\n\nTemperature, Humidity, DewPoint, Pressure\n\n\n\n\n\n\nForecast.getDailyForecast()\n\n\nHigh Temperature, Low Temperature, Humidity, DewPoint, Pressure, Sky Conditions\n\n\n\n\n\n\nHistory.getHourlyConditions()\n\n\nTODO: add data items\n\n\n\n\n\n\nHistory.getDailyConditions()\n\n\nTODO: add data items\n\n\n\n\n\n\nHistory.getAverageConditions()\n\n\nTODO: add data items",
            "title": "API Classes"
        },
        {
            "location": "/class-overview/#overview-of-classes",
            "text": "The Java API provides several classes for connecting to the web service and \nretrieving weather data as described in the table below.     Class  Description      Connection  Creates connections to the Prime Weather web application    Forecast  Retrieves current and future weather conditions    History  Retrieves historic weather conditions    Conditions  Contains the weather data returned by the methods of the Forecast and History classes    Alert  Contains weather alert data returned by the Forecast class",
            "title": "Overview of Classes"
        },
        {
            "location": "/class-overview/#conditions-class-details",
            "text": "The Conditions class inherits from java.util.HashMap and provides a key/value map (<String, String>) \nof weather data item names and values. \nThe various methods of the Forecast and History classes return Condition objects containing different sets \nof data items. \nTable-1 below identifies all weather data items. Table-2 specifies the specific sets of data items\nreturned in Condition objects by methods of the Forecast and History classes.",
            "title": "Conditions Class Details"
        },
        {
            "location": "/class-overview/#table-1-weather-data-items",
            "text": "Data Item Name  Units of Measure      Temperature  degrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)    High Temperature  degrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)    Low Temperature  degrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)    Humidity  %    Pressure  millibar (mb)    Dewpoint  degrees Fahrenheit (\u00b0F) or degrees Celsius (\u00b0C)    Wind Speed  Knots (kts) or Meters/Second (m/s)    Wind Direction  Degrees (\u00b0)    Sky Conditions  Sunny, Partly Sunny, Mostly Sunny, Cloudy, Partly Cloudy, Mostly Cloudy    Sunrise  24-hour time    Sunset  24-hour time",
            "title": "Table-1 Weather Data Items"
        },
        {
            "location": "/class-overview/#table-2-data-items-returned-in-condition-objects",
            "text": "Class.Method  Data Items in the returned Conditions object      Forecast.getCurrentConditions()  Temperature, Humidity, DewPoint, Pressure    Forecast.getHourlyForecast()  Temperature, Humidity, DewPoint, Pressure    Forecast.getDailyForecast()  High Temperature, Low Temperature, Humidity, DewPoint, Pressure, Sky Conditions    History.getHourlyConditions()  TODO: add data items    History.getDailyConditions()  TODO: add data items    History.getAverageConditions()  TODO: add data items",
            "title": "Table-2 Data Items Returned in Condition Objects"
        },
        {
            "location": "/connections/",
            "text": "Web Service Connections\n\n\n\n\n\n\nConnecting to Prime Weather\n\n\nThe first step in retrieving weather data is to create a Connection object. Forecast and History\nobjects use connection objects to retrieve weather data. The example below\nconnects to Prime Weather using the specified Account Key.\n\n\n//Connect to the Prime Weather web application.\nString accountKey = \"3715qrwe\";\nConnection connection = new Connection(accountKey);\n\n\n\n\nSetting Configuration Parameters\n\n\nConnection objects contain properties for configuring the units of measure (English or Metric) \nand for specifying geographic location. Once these properties are set, they will stay in effect\nfor all subsequent API calls until changed.\nThe example below sets the units of measure to \nMetric\n, \nand specifies the location of Ellicott City, MD (Latitude: 39.2673, Logitude: -76.7983) .\n\n\n//Configure the location.\ndouble EllicottCityLatitude = 39.2673;\ndouble EllicottCityLogitude = -76.7983;\nconnection.setLocation(EllicottCityLatitude, EllicottCityLogitude);\n\n//Configure the units of measure\nconnection.setUnits(Connection.Units.METRIC);",
            "title": "Web Service Connections"
        },
        {
            "location": "/connections/#connecting-to-prime-weather",
            "text": "The first step in retrieving weather data is to create a Connection object. Forecast and History\nobjects use connection objects to retrieve weather data. The example below\nconnects to Prime Weather using the specified Account Key.  //Connect to the Prime Weather web application.\nString accountKey = \"3715qrwe\";\nConnection connection = new Connection(accountKey);",
            "title": "Connecting to Prime Weather"
        },
        {
            "location": "/connections/#setting-configuration-parameters",
            "text": "Connection objects contain properties for configuring the units of measure (English or Metric) \nand for specifying geographic location. Once these properties are set, they will stay in effect\nfor all subsequent API calls until changed.\nThe example below sets the units of measure to  Metric , \nand specifies the location of Ellicott City, MD (Latitude: 39.2673, Logitude: -76.7983) .  //Configure the location.\ndouble EllicottCityLatitude = 39.2673;\ndouble EllicottCityLogitude = -76.7983;\nconnection.setLocation(EllicottCityLatitude, EllicottCityLogitude);\n\n//Configure the units of measure\nconnection.setUnits(Connection.Units.METRIC);",
            "title": "Setting Configuration Parameters"
        },
        {
            "location": "/forecasts/",
            "text": "Weather Forecasts\n\n\n\n\n\n\nThe Prime Weather Java API provides access to current \nand forecasted weather conditions for any location on earth. \nThe forecast data includes hourly conditions for the next 48 hours and daily conditions for the next\nten days. The API also provides access to active weather alerts and radar images.\n\n\nCreating a Forecast Object\n\n\nThe Forecast class provides methods for retrieving current and forecasted weather data. The \nexample below creates a new Forecast object using a previously created Connection object \n(see \nConnecting to Prime Weather Service\n) and changes the geographic location.\n\n\n//Create a Forecast object.\nForecast forecast = new Forecast(connection);\n\n//Change the location to Key West, FL.\ndouble KeyWestLatitude = 24.5551;\ndouble KeyWestLogitude = -81.7800;\nconnection.setLocation(KeyWestLatitude, KeyWestLogitude);\n\n\n\n\nGetting the Current Weather Conditions\n\n\nUse the getCurrentConditions() method of a Forecast object to retrieve the current weather conditions.\nThe example below creates a Forecast object and prints the current \ntemperature\n and \nhumidity\n. \n\n\n//Get the Current weather conditions and print the Temperature and Humidity.\nConditions currentConditions = forecast.getCurrentConditions();\nSystem.out.println(\"Current Temperature: \"+ currentConditions.get(\"Temperature\"));\nSystem.out.println(\"Current Humidity: \" + currentConditions.get(\"Humidity\"));\n\n\n\n\nGetting Hourly Forecasts\n\n\nUse the getHourlyForecast() method of a Forecast object to retrieve weather data for the \nnext 48 hours. The data is returned as a HashMap of Time and Conditions. The example below \ngets hourly weather data and prints the all of the \ntime\n and \nTemperature\n values. \n\n\n//Get the Hourly forecast and print the Time and Temperature values.\njava.util.HashMap<java.time.LocalTime, Conditions> hourlyForecast = forecast.getHourlyForecast();\nhourlyForecast.forEach((time, conditions) \n    -> System.out.println(\"Time:\" + time + \" Temperature\" + conditions.get(\"Temperature\"))\n);\n\n\n\n\nGetting Daily Forecasts\n\n\nUse the getHourlyForecast() method of a Forecast object to retrieve weather data for the \nnext 10 days. The data is returned as a HashMap of Date and Conditions. The example below \ngets daily weather data and prints the all of the \ntime\n and \nHigh Temperature\n values. \n\n\n//Get the Daily forecast and print the Date and Temperature values.\njava.util.HashMap<java.time.LocalDate, Conditions> DailyForecast = forecast.getDailyForecast();\nDailyForecast.forEach((date, conditions) \n    -> System.out.println(\"Date:\" + date + \" High Temperature\" + conditions.get(\"High Temperature\"))\n);\n\n\n\n\nGetting Weather Alerts\n\n\nUse the getAlerts() method of a Forecast object to retrieve an array of Alert objects representing \nall currently active alerts for a location. Each Alert object consists of an \nAlert Summary\n \nand a \nDiscussion\n, which provides detailed information about severe weather conditions. \nThe example below gets all current weather alerts and prints the alert summaries.\n\n\n//Get the alerts and print the summaries.\njava.util.ArrayList<Alert> alerts = forecast.getAlerts();\nalerts.forEach((alert)\n    -> System.out.println(\"Alert Summary: \" + alert.getSummary()));\n\n\n\n\nGetting Radar Images\n\n\nUse the getRadarImage() method of a Forecast object to retrieve dynamically generated\nradar images. The \nrange\n parameter specifies the radius of the radar image coverage area \n(the units match the units of measure currently configured on the Connection object). \nThe \nanimated\n parameter determines whether the method returns a static PNG or an animated GIF image. \nThe animated image displays radar images for the past four hours in 10 minute intervals. The example below\nretrieves an animated radar image for the area covered by a 100 kilometer radius.\n\n\n//Get the animated 100km radar image.\nint range = 100; //kilometers\nboolean animated = true;\nbyte[] radar100 = forecast.getRadarImage(range, animated);",
            "title": "Weather Forecasts"
        },
        {
            "location": "/forecasts/#creating-a-forecast-object",
            "text": "The Forecast class provides methods for retrieving current and forecasted weather data. The \nexample below creates a new Forecast object using a previously created Connection object \n(see  Connecting to Prime Weather Service ) and changes the geographic location.  //Create a Forecast object.\nForecast forecast = new Forecast(connection);\n\n//Change the location to Key West, FL.\ndouble KeyWestLatitude = 24.5551;\ndouble KeyWestLogitude = -81.7800;\nconnection.setLocation(KeyWestLatitude, KeyWestLogitude);",
            "title": "Creating a Forecast Object"
        },
        {
            "location": "/forecasts/#getting-the-current-weather-conditions",
            "text": "Use the getCurrentConditions() method of a Forecast object to retrieve the current weather conditions.\nThe example below creates a Forecast object and prints the current  temperature  and  humidity .   //Get the Current weather conditions and print the Temperature and Humidity.\nConditions currentConditions = forecast.getCurrentConditions();\nSystem.out.println(\"Current Temperature: \"+ currentConditions.get(\"Temperature\"));\nSystem.out.println(\"Current Humidity: \" + currentConditions.get(\"Humidity\"));",
            "title": "Getting the Current Weather Conditions"
        },
        {
            "location": "/forecasts/#getting-hourly-forecasts",
            "text": "Use the getHourlyForecast() method of a Forecast object to retrieve weather data for the \nnext 48 hours. The data is returned as a HashMap of Time and Conditions. The example below \ngets hourly weather data and prints the all of the  time  and  Temperature  values.   //Get the Hourly forecast and print the Time and Temperature values.\njava.util.HashMap<java.time.LocalTime, Conditions> hourlyForecast = forecast.getHourlyForecast();\nhourlyForecast.forEach((time, conditions) \n    -> System.out.println(\"Time:\" + time + \" Temperature\" + conditions.get(\"Temperature\"))\n);",
            "title": "Getting Hourly Forecasts"
        },
        {
            "location": "/forecasts/#getting-daily-forecasts",
            "text": "Use the getHourlyForecast() method of a Forecast object to retrieve weather data for the \nnext 10 days. The data is returned as a HashMap of Date and Conditions. The example below \ngets daily weather data and prints the all of the  time  and  High Temperature  values.   //Get the Daily forecast and print the Date and Temperature values.\njava.util.HashMap<java.time.LocalDate, Conditions> DailyForecast = forecast.getDailyForecast();\nDailyForecast.forEach((date, conditions) \n    -> System.out.println(\"Date:\" + date + \" High Temperature\" + conditions.get(\"High Temperature\"))\n);",
            "title": "Getting Daily Forecasts"
        },
        {
            "location": "/forecasts/#getting-weather-alerts",
            "text": "Use the getAlerts() method of a Forecast object to retrieve an array of Alert objects representing \nall currently active alerts for a location. Each Alert object consists of an  Alert Summary  \nand a  Discussion , which provides detailed information about severe weather conditions. \nThe example below gets all current weather alerts and prints the alert summaries.  //Get the alerts and print the summaries.\njava.util.ArrayList<Alert> alerts = forecast.getAlerts();\nalerts.forEach((alert)\n    -> System.out.println(\"Alert Summary: \" + alert.getSummary()));",
            "title": "Getting Weather Alerts"
        },
        {
            "location": "/forecasts/#getting-radar-images",
            "text": "Use the getRadarImage() method of a Forecast object to retrieve dynamically generated\nradar images. The  range  parameter specifies the radius of the radar image coverage area \n(the units match the units of measure currently configured on the Connection object). \nThe  animated  parameter determines whether the method returns a static PNG or an animated GIF image. \nThe animated image displays radar images for the past four hours in 10 minute intervals. The example below\nretrieves an animated radar image for the area covered by a 100 kilometer radius.  //Get the animated 100km radar image.\nint range = 100; //kilometers\nboolean animated = true;\nbyte[] radar100 = forecast.getRadarImage(range, animated);",
            "title": "Getting Radar Images"
        },
        {
            "location": "/historic-data/",
            "text": "Historic Weather Data\n\n\n\n\n\n\nThe Prime Weather Service provides functionality for accessing historic weather data \non an hourly basis for a single day or on a daily basis for range of days. Also, the service\nprovides monthly data averages.\n\n\nCreating a History Object\n\n\nThe History class provides methods for retrieving historic weather data. The \nexample below creates a new History object using a previously created Connection object \n(see \nConnecting to Prime Weather Service\n).\n\n\n//Create a History object.\nHistory history = new History(connection);\n\n\n\n\nGetting Hourly Historic Weather Data\n\n\nUse the getHourlyConditions() method of a History object to retrieve weather data for each hour \nof a single day. The data is returned as a HashMap of Time and Conditions. The example below gets\nthe weather data for January 1, 1962 and prints the low temperature values.\n\n\n//Get historic data for a single day and print the low temperature values.\njava.time.LocalDate date = java.time.LocalDate.parse(\"1962-01-01\");\njava.util.HashMap<java.time.LocalTime, Conditions> historicHourlyConditions = history.getHourlyConditions(date);\nhistoricHourlyConditions.forEach((time, conditions) \n    -> System.out.println(\"Time:\" + time + \" Low Temperature\" + conditions.get(\"Low Temperature\"))\n\n\n\n\nGetting Daily Historic Weather Data\n\n\nUse the getDailyConditions() method of a History object to retrieve weather data for each hour \nof a single day. The data is returned as a HashMap of Time and Conditions. The example below gets\nthe weather data for January 1, 1962 and prints the low temperature values.\n\n\n//Get historic data for a single day and print the high temperature values.\njava.time.LocalDate startDate = java.time.LocalDate.parse(\"2002-01-01\");\njava.time.LocalDate endDate = java.time.LocalDate.parse(\"2002-01-31\");\njava.util.HashMap<java.time.LocalDate, Conditions> historicDailyConditions = \n        history.getDailyConditions(startDate, endDate);\nhistoricDailyConditions.forEach((historicDate, conditions) \n    -> System.out.println(\"Date:\" + historicDate + \" High Temperature\" + conditions.get(\"High Temperature\"))\n);\n\n\n\n\nGetting Monthly Averages\n\n\nUse the getAverageConditions() method of a History object to retrieve average weather conditions \nfor each month of a single year. The example below gets the average conditions for 2003 and\nprints the average high temperature values.\n\n\n//Get the average conditions for the year 2003 and print the high average temperature values.\nint year = 2003;\njava.util.HashMap<java.time.Month, Conditions> averageConditions = history.getAverageConditions(year);\naverageConditions.forEach((month, conditions)\n    -> System.out.println(\"Month: \" + month + \" Average High Temperature: \" + conditions.get(\"Average High Temperature\"))\n);",
            "title": "Historic Weather Data"
        },
        {
            "location": "/historic-data/#creating-a-history-object",
            "text": "The History class provides methods for retrieving historic weather data. The \nexample below creates a new History object using a previously created Connection object \n(see  Connecting to Prime Weather Service ).  //Create a History object.\nHistory history = new History(connection);",
            "title": "Creating a History Object"
        },
        {
            "location": "/historic-data/#getting-hourly-historic-weather-data",
            "text": "Use the getHourlyConditions() method of a History object to retrieve weather data for each hour \nof a single day. The data is returned as a HashMap of Time and Conditions. The example below gets\nthe weather data for January 1, 1962 and prints the low temperature values.  //Get historic data for a single day and print the low temperature values.\njava.time.LocalDate date = java.time.LocalDate.parse(\"1962-01-01\");\njava.util.HashMap<java.time.LocalTime, Conditions> historicHourlyConditions = history.getHourlyConditions(date);\nhistoricHourlyConditions.forEach((time, conditions) \n    -> System.out.println(\"Time:\" + time + \" Low Temperature\" + conditions.get(\"Low Temperature\"))",
            "title": "Getting Hourly Historic Weather Data"
        },
        {
            "location": "/historic-data/#getting-daily-historic-weather-data",
            "text": "Use the getDailyConditions() method of a History object to retrieve weather data for each hour \nof a single day. The data is returned as a HashMap of Time and Conditions. The example below gets\nthe weather data for January 1, 1962 and prints the low temperature values.  //Get historic data for a single day and print the high temperature values.\njava.time.LocalDate startDate = java.time.LocalDate.parse(\"2002-01-01\");\njava.time.LocalDate endDate = java.time.LocalDate.parse(\"2002-01-31\");\njava.util.HashMap<java.time.LocalDate, Conditions> historicDailyConditions = \n        history.getDailyConditions(startDate, endDate);\nhistoricDailyConditions.forEach((historicDate, conditions) \n    -> System.out.println(\"Date:\" + historicDate + \" High Temperature\" + conditions.get(\"High Temperature\"))\n);",
            "title": "Getting Daily Historic Weather Data"
        },
        {
            "location": "/historic-data/#getting-monthly-averages",
            "text": "Use the getAverageConditions() method of a History object to retrieve average weather conditions \nfor each month of a single year. The example below gets the average conditions for 2003 and\nprints the average high temperature values.  //Get the average conditions for the year 2003 and print the high average temperature values.\nint year = 2003;\njava.util.HashMap<java.time.Month, Conditions> averageConditions = history.getAverageConditions(year);\naverageConditions.forEach((month, conditions)\n    -> System.out.println(\"Month: \" + month + \" Average High Temperature: \" + conditions.get(\"Average High Temperature\"))\n);",
            "title": "Getting Monthly Averages"
        }
    ]
}